import java.util.Arrays;  
import java.util.HashMap;  
import java.util.Map;  

public class StatisticsCalculator {  

    public static void main(String[] args) {  
        // Test cases  
        double[] testCase1 = {26, 28, 37, 26, 33, 31, 29};  
        double[] testCase2 = {1.6, 1.8, 2.7, 1.6, 2.3, 2.1, 0.19};  
        double[] testCase3 = {0, 160, 180, 270, 160, 230, 210, 190, 0};  
        double[] testCase4 = {200, 180, 180, 270, 160, 270, 270, 190, 200};  
        double[] testCase5 = {100, 100, 100, 100, 100, 100, 100, 100, 100};  

        System.out.println("Test Case 1:");  
        printStatistics(testCase1);  
        System.out.println("\nTest Case 2:");  
        printStatistics(testCase2);  
        System.out.println("\nTest Case 3:");  
        printStatistics(testCase3);  
    }  

    public static void printStatistics(double[] array) {  
        System.out.printf("Array: %s\n", Arrays.toString(array));  
        System.out.printf("Mean: %.2f\n", calculateMean(array));  
        System.out.printf("Median: %.2f\n", calculateMedian(array));  
        System.out.printf("Mode: %.2f\n", calculateMode(array));  
    }  

    public static double calculateMean(double[] array) {  
        double sum = 0;  
        for (double num : array) {  
            sum += num;  
        }  
        return sum / array.length;  
    }  

    public static double calculateMedian(double[] array) {  
        Arrays.sort(array);  
        int n = array.length;  
        if (n % 2 == 0) {  
            return (array[n / 2 - 1] + array[n / 2]) / 2.0;  
        } else {  
            return array[n / 2];  
        }  
    }  

    public static double calculateMode(double[] array) {  
        Map<Double, Integer> frequencyMap = new HashMap<>();  
        for (double num : array) {  
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);  
        }  
        
        double mode = array[0];  
        int maxCount = 0;  

        for (Map.Entry<Double, Integer> entry : frequencyMap.entrySet()) {  
            if (entry.getValue() > maxCount) {  
                maxCount = entry.getValue();  
                mode = entry.getKey();  
            }  
        }  
  
        return maxCount > 1 ? mode : Double.NaN;  
    }  
}
